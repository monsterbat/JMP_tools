// JMP Duplicate process JSL script
// Editor : SC Hsiao
// Update date : 2025/05/08
// Version V 1.0
//---------------------------------------------------------------

// 1. Choose file
filePath = Pick File("Choose JMP file", {"JMP Files|jmp"});
dt = Open(filePath);

// Step 2: Fetch all column names
columnNames = {};
For(i = 1, i <= N Col(dt), i++,
    Insert Into(columnNames, Column(dt, i) << Get Name);
);

// Step 3: Create two dropdowns for SN and Judge
lb_SN = Combo Box(columnNames);
lb_Judge = Combo Box(columnNames);

// Create GUI window
nw = New Window("Select SN and Judge columns",
    V List Box(
        Text Box("Select SN column:"),
        lb_SN,
        Text Box("Select Judge column:"),
        lb_Judge,
        Button Box("Excluded!",
            sn_col_name = lb_SN << Get Selected;
            Judge_col_name = lb_Judge << Get Selected;
            
            If(Is Missing(sn_col_name) | Is Missing(Judge_col_name),
                Throw("Please select both SN and Judge columns");
            );
            
            // Create new column if not exist
            If( !Contains( dt << Get Column Names(), "Duplicate" ),
                dt << New Column("Duplicate", Numeric, Continuous);
            );
            
            // Sort by selected SN column
            dt << Sort(By(Column(dt, sn_col_name)), Replace Table);
            
            // Use associative array to track duplicates
            count_dict = Associative Array();
            
            For(i = 1, i <= N Rows(dt), i++,
                current_serial = dt[i, sn_col_name];

                If(Contains(count_dict, current_serial),   
                    count_dict[current_serial] += 1;
                ,
                    count_dict[current_serial] = 1;
                );
                dt[i, "Duplicate"] = count_dict[current_serial];
            );

            //***************************************************
            // Create new column if not exist
            If( !Contains( dt << Get Column Names(), "Duplicate_G" ),
                dt << New Column("Duplicate_G", Numeric, Continuous);
            );

            For(i = 1, i <= N Rows(dt), i++,
                current_serial_G = dt[i, sn_col_name];//
                duplicate_number = dt[i, "Duplicate"];                
                judge_val = Uppercase(Char(dt[i, Judge_col_name]));

                // Duplicate 1
                If(duplicate_number ==1 & judge_val == "PASS",
                    Column(dt, "Duplicate_G")[i] = "Done";

                );
                If(duplicate_number ==1 & judge_val == "FAIL",
                    Column(dt, "Duplicate_G")[i] = "Unclear";
                ); 
                // Duplicate 2               
                If(duplicate_number == 2,
                    column_name_SN = sn_col_name;
                    target_value_SN = current_serial_G;
                    column_data_SN = Column(dt, column_name_SN) << Get As Matrix;                    
                    row_numbers_SN = Loc(column_data_SN, target_value_SN);                   

                    column_name_Duplicate = "Duplicate";
                    target_value_Duplicate = 1;
                    column_data_Duplicate = Column(dt, column_name_Duplicate) << Get As Matrix;                     
                    row_numbers_Duplicate = Loc(column_data_Duplicate, target_value_Duplicate);                    

                    //Get intersection
                    Duplicate_G_result_1 = []; 

                    For(j = 1, j <= N Items(row_numbers_SN), j++,
                        For(k = 1, k <= N Items(row_numbers_Duplicate), k++,
                            If(row_numbers_SN[j] == row_numbers_Duplicate[k],
                                Insert Into(Duplicate_G_result_1, row_numbers_SN[j]);
                                Break(); 
                            );
                        );
                    );

                    If( N Items(Duplicate_G_result_1) > 0,

                        Duplicate_G_result_in = dt[Duplicate_G_result_1[1], "Duplicate_G"];                        
                    ,
                        Duplicate_G_result_in = "Missing"; 
                    );

                    if(judge_val == "PASS",
                        if(Duplicate_G_result_in == "Done",                    
                            Column(dt, "Duplicate_G")[i] = "Excluded";                  
                        );
                        if(Duplicate_G_result_in == "Unclear",
                            Column(dt, "Duplicate_G")[i] = "Done";
                            Column(dt, "Duplicate_G")[Duplicate_G_result_1[1]] = "Excluded";
                        );
                    );
                    if(judge_val == "FAIL",
                        if(Duplicate_G_result_in == "Done",
                            Column(dt, "Duplicate_G")[i] = "Excluded";
                        );
                        if(Duplicate_G_result_in == "Unclear",
                            Column(dt, "Duplicate_G")[i] = "Unclear";
                            Column(dt, "Duplicate_G")[Duplicate_G_result_1[1]] = "Excluded";
                        );
                    );
                );

                // Duplicate 3
                If(duplicate_number == 3,
                    column_name_SN = sn_col_name;
                    target_value_SN = current_serial_G;
                    column_data_SN = Column(dt, column_name_SN) << Get As Matrix;                    
                    row_numbers_SN = Loc(column_data_SN, target_value_SN);                   

                    column_name_Duplicate = "Duplicate";
                    target_value_Duplicate = 2;
                    column_data_Duplicate = Column(dt, column_name_Duplicate) << Get As Matrix;                    
                    row_numbers_Duplicate = Loc(column_data_Duplicate, target_value_Duplicate);
                   
                    //Get intersection
                    Duplicate_G_result_2 = []; 

                    For(l = 1, l <= N Items(row_numbers_SN), l++,
                        For(m = 1, m <= N Items(row_numbers_Duplicate), m++,
                            If(row_numbers_SN[l] == row_numbers_Duplicate[m],
                                Insert Into(Duplicate_G_result_2, row_numbers_SN[l]);
                                Break(); 
                            );
                        );
                    );
                    If( N Items(Duplicate_G_result_2) > 0,
                        Duplicate_G_result_in = dt[Duplicate_G_result_2[1], "Duplicate_G"];                        
                    ,
                        Duplicate_G_result_in = "Missing"; 
                    );

                    if(judge_val == "PASS",
                        if(Duplicate_G_result_in == "Done",
                            Column(dt, "Duplicate_G")[i] = "Excluded";
                        );
                        if(Duplicate_G_result_in == "Unclear",
                            Column(dt, "Duplicate_G")[i] = "Done";
                            Column(dt, "Duplicate_G")[Duplicate_G_result_2[1]] = "Excluded";
                        );
                        if(Duplicate_G_result_in == "Excluded",
                            Column(dt, "Duplicate_G")[i] = "Excluded";
                        );
                    );
                    if(judge_val == "FAIL",
                        if(Duplicate_G_result_in == "Done",
                            Column(dt, "Duplicate_G")[i] = "Excluded";
                        );
                        if(Duplicate_G_result_in == "Unclear",
                            Column(dt, "Duplicate_G")[i] = "Unclear";
                            Column(dt, "Duplicate_G")[Duplicate_G_result_2[1]] = "Excluded";
                        );
                        if(Duplicate_G_result_in == "Excluded",
                            Column(dt, "Duplicate_G")[i] = "Excluded";
                        );
                    );
                );

                // Duplicate > 3
                If(duplicate_number > 3,
                    Column(dt, "Duplicate_G")[i] = "Excluded";                    
                );
            );

            // Excluded Rows Filter
            ExcludedRows = {};
            For(i = 1, i <= N Rows(dt), i++,
                If(Column(dt, "Duplicate_G")[i] == "Excluded",
                    Insert Into(ExcludedRows, i)
                );
            );

            // If Excluded Rows found, exclude
            If(N Items(ExcludedRows) > 0,
                dt << Clear Select;
                dt << Select Rows(ExcludedRows);
                dt << Exclude;
                Write("✅ Excluded ", N Items(ExcludedRows), " rows");
            ,
                Write("✅ No Excluded rows found");
            );
            //***************************************************
            nw << Close Window;
        )
    )
);
