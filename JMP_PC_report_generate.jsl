// JMP report generate JSL script
// Editor : SC Hsiao
// Update date : 2025/04/27
// Version V 0.2.2
//---------------------------------------------------------------
//-----------------------< ⬇ JSL Best fit code ⬇ >---------------------------

	// Step 0: Choose JMP file
	filePath = Pick File("Choose JMP file", {"JMP Files|jmp"});
	dt = Open(filePath);


	// Fetch all column names
	columnNames = {};
	For(i = 1, i <= N Col(dt), i++,
		Insert Into(columnNames, Column(dt, i) << Get Name);
	);

	// Create a multi-selection list box (allow Shift/Ctrl selection)
	lb_columns = List Box(
		columnNames,
		<<Set Multiple Selection(1),
		<<Set Width(400),     // ✅ 設定寬度（例如400像素）
		<<Set Height(300)     // ✅ 設定高度（例如300像素）
	);

	// Create GUI window
	nw = New Window("Select columns to analyze",
		V List Box(
			Text Box("Please select columns (use Shift/Ctrl to select multiple):"),
			lb_columns,
			
			Button Box("Confirm Selection",
				// Fetch selected column names
				selected = lb_columns << Get Selected;
				
				// Convert selected column names into JSL matrix format
				myVars = "{";
				For(i = 1, i <= N Items(selected), i++,
					myVars = myVars || "\t:" || selected[i];
					If(i < N Items(selected),
						myVars = myVars || ",";
					);
					myVars = myVars || "\n";
				);
				myVars = myVars || "}";
				
				
				// Convert selected column names into actual JSL matrix
				myVarsExpr = Parse("{" || Concat Items(selected, ", :") || "}");
				myVars = Eval(myVarsExpr);
				
				// Close selection window
				nw << Close Window;
				Run Analysis(myVars);
			)
		)
	);

	// Define analysis function
	Run Analysis = Function({myVars},
	// 1. Dynamically build Process Variables expression
	processVarsExpr = Expr(Process Variables());
	For(i = 1, i <= N Items(myVars), i++,
		Insert Into(processVarsExpr, Name Expr(myVars[i]));
	);
//------------------------------------------------------------------------------

// -----------------------< ⬇ Process Capability ⬇ >---------------------------

	// 2. Use Substitute to correctly inject variables
	pc_r1 = Eval(
		Substitute(
			Expr(
				Process Capability(
					_processVars_,
					Fit Distribution(Fit Best),
					Moving Range Method(Average of Moving Ranges),
					Individual Detail Reports(1),
					Capability Box Plots(0),
					Overall Sigma Summary Report(1),
					Goal Plot(0),
					Capability Index Plot(0),
					Process Performance Plot(0),
					SendToReport(
						//
						Dispatch( {}, "Individual Detail Reports", OutlineBox, {Close( 1 )} ),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Process",
							StringColBox,
							{Numerical Order( 0 )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Sample Mean",
							NumberColBox,
							{Set Format( "Fixed Dec", 8, 3 )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Sample Std Dev",
							NumberColBox,
							{Visibility( "Collapse" )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Overall Sigma",
							NumberColBox,
							{Visibility( "Collapse" )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Stability Index",
							NumberColBox,
							{Visibility( "Collapse" )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Ppk", NumberColBox,
							{Set Format( "Fixed Dec", 6, 2 )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Ppl", NumberColBox,
							{Visibility( "Collapse" )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Ppu", NumberColBox,
							{Visibility( "Collapse" )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Pp", NumberColBox,
							{Visibility( "Collapse" )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Cpm", NumberColBox,
							{Visibility( "Collapse" )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Expected % Outside",
							NumberColBox,
							{Set Format( "Fixed Dec", 9, 2 )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"},
							"Expected % Below LSL", NumberColBox,
							{Visibility( "Collapse" )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"},
							"Expected % Above USL", NumberColBox,
							{Visibility( "Collapse" )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"}, "Observed % Outside",
							NumberColBox,
							{Set Format( "Fixed Dec", 9, 2 )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"},
							"Observed % Below LSL", NumberColBox,
							{Visibility( "Collapse" )}
						),
						Dispatch( {"Overall Sigma Capability Summary Report"},
							"Observed % Above USL", NumberColBox,
							{Visibility( "Collapse" )}
						)
					)
				)
			),
			Expr(_processVars_), Name Expr(processVarsExpr)
		)
	);

//-----------------------< ⬇ Report Generate ⬇ >---------------------------
	pcReport = Report(pc_r1);
	

	
	base_name = "pcg"; 

	//  Generate a filename with date
	today_str = Format(Today(), "yyyymmdd");
	report_name = base_name || "_ProcessReport_" || today_str;
	
	

	// Let the user choose the save directory(MAC)
	save_dir = Pick Directory("Please select a location to save the report", "$DESKTOP");
	If(Is Empty(save_dir),
		Throw("User canceled the save location selection");
	);

	// Modify the report output line(MAC)
	pcReport << Save Interactive HTML("$DESKTOP/" || report_name || ".html");
	pcReport << Save PDF("$DESKTOP/" || report_name || ".pdf");
	pcReport << Save Picture("$DESKTOP/" || report_name || ".png");
	pcReport << Save Presentation("$DESKTOP/" || report_name || ".pptx");
)
/*	// Let the user choose the save directory(Windows)
	save_dir = Pick Directory("Please select a location to save the report", "C:\Users");
	If(Is Empty(save_dir),
		Throw("User canceled the save location selection");
	);
	

	// Modify the report output line(Windows)
	pcReport << Save Interactive HTML(save_dir || "\\" || report_name || ".html");
	pcReport << Save PDF(save_dir || "\\" || report_name || ".pdf");
*/